// -------------------------------------------------------------
// øµø™¡æ«’≈◊¿Ã∫Ì
// 
// Copyright (c) 2003 IMAGIRE Takashi. All rights reserved.
// -------------------------------------------------------------

// -------------------------------------------------------------
// ¿¸ø™∫Øºˆ
// -------------------------------------------------------------

float  MAP_WIDTH;	// SAT ∆¯
float  MAP_HEIGHT;	// SAT ≥Ù¿Ã

float SIZE = 40.0f;	// π∂∞∂æÁ
float INV_SIZE2=1.0f/(40.0f*40.0f);	// π∂∞∂æÁ¿« ø™ºˆ¿« ¡¶∞ˆ

// -------------------------------------------------------------
// ≈ÿΩ∫√≥
// -------------------------------------------------------------
texture SrcMap;
sampler SrcSamp = sampler_state
{
    Texture = <SrcMap>;
    MinFilter = POINT;
    MagFilter = POINT;
    MipFilter = NONE;

    AddressU = Clamp;
    AddressV = Clamp;
};
// -------------------------------------------------------------
// ¡§¡°ºŒ¿Ã¥ıø°º≠ «»ºøºŒ¿Ã¥ı∑Œ ≥—±‚¥¬ µ•¿Ã≈Õ
// -------------------------------------------------------------
struct VS_OUTPUT
{
    float4 Pos			: POSITION;
    float2 ofset		: COLOR0;
	float2 Tex0			: TEXCOORD0;
	float2 Tex1			: TEXCOORD1;
	float2 Tex2			: TEXCOORD2;
	float2 Tex3			: TEXCOORD3;
};

// -------------------------------------------------------------
// -------------------------------------------------------------
// øµø™ √—«’ ≈◊¿Ã∫Ì ∏∏µÈ±‚
// -------------------------------------------------------------
// -------------------------------------------------------------

// -------------------------------------------------------------
// ¡§¡°ºŒ¿Ã¥ı
// -------------------------------------------------------------
VS_OUTPUT VS_sat_x (
      float4 Pos    : POSITION,          // ∏µ®¡§¡°
      float4 Tex    : TEXCOORD0	         // ≈ÿΩ∫√≥¡¬«•
){
    VS_OUTPUT Out = (VS_OUTPUT)0;        // √‚∑¬µ•¿Ã≈Õ
    
    // ¿ßƒ°¡¬«•
    Out.Pos = Pos;
    
    // ≈ÿΩ∫√≥¡¬«•
    Out.Tex0 = Tex + float2( 0.5f/MAP_WIDTH, 0.5f/MAP_HEIGHT );
    Out.Tex1 = Tex + float2(-0.5f/MAP_WIDTH, 0.5f/MAP_HEIGHT );// Òß
    
    return Out;
}

// -------------------------------------------------------------
// ¡§¡°ºŒ¿Ã¥ı
// -------------------------------------------------------------
VS_OUTPUT VS_sat_y (
      float4 Pos    : POSITION,          // ∏µ®¡§¡°
      float4 Tex    : TEXCOORD0	         // ≈ÿΩ∫√≥¡¬«•
){
    VS_OUTPUT Out = (VS_OUTPUT)0;        // √‚∑¬µ•¿Ã≈Õ
    
    // ¿ßƒ°¡¬«•
    Out.Pos = Pos;
    
    // ≈ÿΩ∫√≥¡¬«•
    Out.Tex0 = Tex + float2( 0.5f/MAP_WIDTH, 0.5f/MAP_HEIGHT );
    Out.Tex1 = Tex + float2( 0.5f/MAP_WIDTH,-0.5f/MAP_HEIGHT );// ﬂæ
    
    return Out;
}

// -------------------------------------------------------------
// «»ºøºŒ¿Ã¥ı
// -------------------------------------------------------------
float4 PS_sat(VS_OUTPUT In) : COLOR
{   
    float4 Color;
	
	Color  = tex2D( SrcSamp, In.Tex0 )
               + tex2D( SrcSamp, In.Tex1 );
	
    return Color-0.5f;
}

// -------------------------------------------------------------
// -------------------------------------------------------------
// √÷¡æ√‚∑¬
// -------------------------------------------------------------
// -------------------------------------------------------------

// -------------------------------------------------------------
// í∏ì_ÉVÉFÅ[É_ÉvÉçÉOÉâÉÄ
// -------------------------------------------------------------
VS_OUTPUT VS_out (
      float4 Pos    : POSITION,          // ∏µ®¡§¡°
      float4 Tex    : TEXCOORD0	         // ≈ÿΩ∫√≥¡¬«•
){
    VS_OUTPUT Out = (VS_OUTPUT)0;        // √‚∑¬µ•¿Ã≈Õ
    
    // ¿ßƒ°¡¬«•
    Out.Pos = Pos;
    
    Out.Tex0 = Tex + float2( (-0.5f-0.5f*SIZE)/MAP_WIDTH
                           , (-0.5f-0.5f*SIZE)/MAP_HEIGHT );// Òßﬂæ
    Out.Tex1 = Tex + float2( (-0.5f-0.5f*SIZE)/MAP_WIDTH
                           , (-0.5f+0.5f*SIZE)/MAP_HEIGHT );// Òß˘ª
    Out.Tex2 = Tex + float2( (-0.5f+0.5f*SIZE)/MAP_WIDTH
                           , (-0.5f-0.5f*SIZE)/MAP_HEIGHT );// È”ﬂæ
    Out.Tex3 = Tex + float2( (-0.5f+0.5f*SIZE)/MAP_WIDTH
                           , (-0.5f+0.5f*SIZE)/MAP_HEIGHT );// È”˘ª
    
    return Out;
}

// -------------------------------------------------------------
// «»ºøºŒ¿Ã¥ı
// -------------------------------------------------------------
float4 PS_out(VS_OUTPUT In) : COLOR
{   
    float4 Color;
    
    Color  =( tex2D( SrcSamp, In.Tex0 )
            - tex2D( SrcSamp, In.Tex1 )
            - tex2D( SrcSamp, In.Tex2 )
            + tex2D( SrcSamp, In.Tex3 ))*INV_SIZE2;

    return Color+0.5f;
}

// -------------------------------------------------------------
// ≈◊≈©¥–
// -------------------------------------------------------------
technique TShader
{
    pass P0
    {
		// -----------------------------------------------------
		// X√‡ π∂∞≥±‚
		// -----------------------------------------------------
        VertexShader = compile vs_1_1 VS_sat_x();
        PixelShader  = compile ps_1_1 PS_sat();
    }
    pass P1
    {
		// -----------------------------------------------------
		// Y√‡ π∂∞≥±‚
		// -----------------------------------------------------
        VertexShader = compile vs_1_1 VS_sat_y();
        PixelShader  = compile ps_1_1 PS_sat();
    }
    pass P2
    {
		// -----------------------------------------------------
		// √‚∑¬
		// -----------------------------------------------------
        VertexShader = compile vs_1_1 VS_out();
        PixelShader  = compile ps_1_1 PS_out();
    }
}
